
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var Autocomplete = (function () {
  'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // https://stackoverflow.com/a/53955664/10424385
  var isPromise = function isPromise(value) {
    return Boolean(value && typeof value.then === 'function');
  };

  var isObject = function isObject(value) {
    return value && _typeof(value) === 'object' && value.constructor === Object;
  };

  var Autocomplete = function Autocomplete(_element, _ref) {
    var _this = this;

    var delay = _ref.delay,
        clearButton = _ref.clearButton,
        howManyCharacters = _ref.howManyCharacters,
        selectFirst = _ref.selectFirst,
        insertToInput = _ref.insertToInput,
        classGroup = _ref.classGroup,
        disableCloseOnSelect = _ref.disableCloseOnSelect,
        _ref$onResults = _ref.onResults,
        onResults = _ref$onResults === void 0 ? function () {} : _ref$onResults,
        _ref$onSearch = _ref.onSearch,
        onSearch = _ref$onSearch === void 0 ? function () {} : _ref$onSearch,
        _ref$onSubmit = _ref.onSubmit,
        onSubmit = _ref$onSubmit === void 0 ? function () {} : _ref$onSubmit,
        _ref$onOpened = _ref.onOpened,
        onOpened = _ref$onOpened === void 0 ? function () {} : _ref$onOpened,
        _ref$onReset = _ref.onReset,
        onReset = _ref$onReset === void 0 ? function () {} : _ref$onReset,
        _ref$noResults = _ref.noResults,
        noResults = _ref$noResults === void 0 ? function () {} : _ref$noResults,
        _ref$onSelectedItem = _ref.onSelectedItem,
        onSelectedItem = _ref$onSelectedItem === void 0 ? function () {} : _ref$onSelectedItem;

    _classCallCheck(this, Autocomplete);

    _defineProperty(this, "init", function () {
      if (_this.clearBtn) {
        _this.clearButton();
      }

      _this.output(); // default aria


      _this.reset();

      _this.root.addEventListener('input', _this.handleInput);
    });

    _defineProperty(this, "handleInput", function (_ref2) {
      var target = _ref2.target;
      var regex = target.value.replace(_this.regex, '\\$&');
      clearTimeout(_this.timeout);
      _this.timeout = setTimeout(function () {
        _this.searchItem(regex.trim());
      }, _this.delay);
    });

    _defineProperty(this, "output", function () {
      _this.setAttr(_this.resultList, {
        id: _this.outputUl,
        addClass: 'auto-output-search',
        tabIndex: 0,
        role: 'listbox'
      });

      _this.root.parentNode.insertBefore(_this.resultList, _this.root.nextSibling);
    });

    _defineProperty(this, "reset", function () {
      var _this$matches;

      _this.setAttr(_this.root, {
        'aria-owns': "".concat(_this.search, "-list"),
        'aria-expanded': false,
        'aria-autocomplete': 'both',
        'aria-activedescendant': '',
        role: 'combobox',
        removeClass: 'expanded'
      });

      _this.resultList.classList.remove(_this.isActive); // move the view item to the first item


      _this.resultList.scrollTop = 0; // remove result when lengh = 0 and insertToInput is false

      if (((_this$matches = _this.matches) === null || _this$matches === void 0 ? void 0 : _this$matches.length) == 0 && !_this.toInput) {
        _this.resultList.innerHTML = '';
      }

      _this.index = _this.selectFirst ? 0 : -1;
    });

    _defineProperty(this, "searchItem", function (value) {
      _this.value = value;

      _this.onLoading(true); // hide button clear


      _this.showBtn();

      if (_this.characters > value.length) {
        _this.onLoading();

        return;
      }

      _this.onSearch({
        currentValue: value,
        element: _this.root
      }).then(function (result) {
        // set no result
        _this.matches = Array.isArray(result) ? _toConsumableArray(result) : JSON.parse(JSON.stringify(result));

        _this.onLoading();

        _this.error();

        if (result.length == 0) {
          _this.root.classList.remove('expanded');

          _this.reset();

          _this.noResults({
            element: _this.root,
            currentValue: value,
            template: _this.results
          });

          _this.events();
        } else if (result.length > 0 || isObject(result)) {
          _this.results();

          _this.events();
        }
      }).catch(function () {
        _this.onLoading();

        _this.reset();
      });
    });

    _defineProperty(this, "onLoading", function (type) {
      _this.root.parentNode.classList[type ? 'add' : 'remove'](_this.isLoading);
    });

    _defineProperty(this, "error", function (type) {
      _this.root.classList[type ? 'add' : 'remove'](_this.err);
    });

    _defineProperty(this, "events", function () {
      var liElements = [].slice.call(_this.resultList.children);

      _this.root.addEventListener('keydown', _this.handleKeys);

      _this.root.addEventListener('click', _this.handleShowItems);

      for (var i = 0; i < liElements.length; i++) {
        liElements[i].addEventListener('mousemove', _this.handleMouse);
        liElements[i].addEventListener('click', _this.handleMouse);
      } // close expanded items


      document.addEventListener('click', _this.handleDocClick);
    });

    _defineProperty(this, "results", function (template) {
      _this.setAttr(_this.root, {
        'aria-expanded': true,
        addClass: 'expanded'
      }); // add all found records to otput ul


      _this.resultList.innerHTML = _this.matches.length === 0 ? _this.onResults({
        currentValue: _this.value,
        matches: 0,
        template: template
      }) : _this.onResults({
        currentValue: _this.value,
        matches: _this.matches,
        classGroup: _this.classGroup
      });

      _this.resultList.classList.add(_this.isActive);

      var checkIfClassGroupExist = _this.classGroup ? ":not(.".concat(_this.classGroup, ")") : '';
      _this.itemsLi = document.querySelectorAll("#".concat(_this.outputUl, " > li").concat(checkIfClassGroupExist)); // select first element

      _this.selectFirstEl(); // action on open results


      _this.onOpened({
        type: 'results',
        element: _this.root,
        results: _this.resultList
      }); // adding role, tabindex and aria


      _this.addAriaToLi();
    });

    _defineProperty(this, "handleDocClick", function (_ref3) {
      var target = _ref3.target;
      var disableClose = null;

      if (target.closest('ul') && _this.disableCloseOnSelect) {
        disableClose = true;
      }

      if (target.id !== _this.search && !disableClose) {
        _this.reset();

        return;
      }
    });

    _defineProperty(this, "addAriaToLi", function () {
      for (var i = 0; i < _this.itemsLi.length; i++) {
        _this.setAttr(_this.itemsLi[i], {
          role: 'option',
          tabindex: -1,
          'aria-selected': 'false'
        });
      }
    });

    _defineProperty(this, "selectFirstEl", function () {
      _this.remAria(document.querySelector(".".concat(_this.activeList)));

      if (!_this.selectFirst) {
        return;
      }

      var firstElementChild = _this.resultList.firstElementChild;
      var classSelectFirst = _this.classGroup && _this.matches.length > 0 && _this.selectFirst ? firstElementChild.nextElementSibling : firstElementChild;

      _this.setAttr(classSelectFirst, {
        id: "".concat(_this.selectedOption, "-0"),
        addClass: _this.activeList,
        'aria-selected': true
      });

      _this.setAriaDes(_this.root, "".concat(_this.selectedOption, "-0")); // scrollIntoView when press up/down arrows


      _this.follow(firstElementChild, _this.resultList);
    });

    _defineProperty(this, "showBtn", function () {
      if (!_this.clearBtn) {
        return;
      }

      _this.clearBtn.classList.remove('hidden');

      _this.clearBtn.addEventListener('click', _this.handleClearButton);
    });

    _defineProperty(this, "setAttr", function (el, object) {
      for (var key in object) {
        if (key === 'addClass') {
          el.classList.add(object[key]);
        } else if (key === 'removeClass') {
          el.classList.remove(object[key]);
        } else {
          el.setAttribute(key, object[key]);
        }
      }
    });

    _defineProperty(this, "handleShowItems", function () {
      if (_this.resultList.textContent.length > 0 && !_this.resultList.classList.contains(_this.isActive)) {
        _this.setAttr(_this.root, {
          'aria-expanded': true,
          addClass: 'expanded'
        });

        _this.resultList.classList.add(_this.isActive); // select first element


        _this.selectFirstEl();

        _this.onOpened({
          type: 'showItems',
          element: _this.root,
          results: _this.resultList
        });
      }
    });

    _defineProperty(this, "handleMouse", function (event) {
      event.preventDefault();
      var target = event.target,
          type = event.type;
      var targetClosest = target.closest('li');
      var targetClosestRole = targetClosest === null || targetClosest === void 0 ? void 0 : targetClosest.hasAttribute('role');

      if (!targetClosest || !targetClosestRole) {
        return;
      }

      if (type === 'click') {
        _this.getTextFromLi(targetClosest);
      }

      if (targetClosest.classList.contains(_this.activeList)) {
        return;
      }

      if (type === 'mousemove') {
        _this.remAria(document.querySelector(".".concat(_this.activeList)));

        _this.setAria(targetClosest);

        _this.index = _this.indexLiSelected(targetClosest);

        _this.onSelectedItem({
          index: _this.index,
          element: _this.root,
          object: _this.matches[_this.index]
        });
      }
    });

    _defineProperty(this, "getTextFromLi", function (element) {
      if (!element || _this.matches.length === 0) {
        return;
      }

      _this.addToInput(element); // onSubmit passing text to function


      _this.onSubmit({
        index: _this.index,
        element: _this.root,
        object: _this.matches[_this.index],
        results: _this.resultList
      });

      _this.remAria(element); // set default settings


      if (!_this.disableCloseOnSelect) {
        _this.reset();
      }
    });

    _defineProperty(this, "firstElement", function (element) {
      return element.firstElementChild || element;
    });

    _defineProperty(this, "addToInput", function (element) {
      // add text to input
      _this.root.value = _this.firstElement(element).textContent.trim();
    });

    _defineProperty(this, "indexLiSelected", function (target) {
      return Array.prototype.indexOf.call(_this.itemsLi, target);
    });

    _defineProperty(this, "handleKeys", function (_ref4) {
      var keyCode = _ref4.keyCode;

      var resultList = _this.resultList.classList.contains(_this.isActive);

      var matchesLength = _this.matches.length;
      _this.selectedLi = document.querySelector(".".concat(_this.activeList));

      switch (keyCode) {
        case _this.keyCodes.UP:
        case _this.keyCodes.DOWN:
          if (matchesLength <= 1 && _this.selectFirst || !resultList) {
            return;
          }

          if (keyCode === _this.keyCodes.UP) {
            _this.index -= 1;

            if (_this.index < 0) {
              _this.index = matchesLength - 1;
            }
          } else {
            _this.index += 1;

            if (_this.index >= matchesLength) {
              _this.index = 0;
            }
          }

          _this.remAria(_this.selectedLi);

          if (matchesLength > 0) {
            _this.onSelectedItem({
              index: _this.index,
              element: _this.root,
              object: _this.matches[_this.index]
            });

            _this.setAria(_this.itemsLi[_this.index]);

            if (_this.toInput && resultList) {
              _this.addToInput(_this.itemsLi[_this.index]);
            }
          }

          break;

        case _this.keyCodes.ENTER:
          _this.remAria(_this.selectedLi);

          _this.getTextFromLi(_this.selectedLi);

          break;

        case _this.keyCodes.TAB:
        case _this.keyCodes.ESC:
          _this.reset();

          break;
      }
    });

    _defineProperty(this, "setAria", function (target) {
      // eslint-disable-next-line prettier/prettier
      var selectedOption = "".concat(_this.selectedOption, "-").concat(_this.indexLiSelected(target));

      _this.setAttr(target, {
        id: selectedOption,
        'aria-selected': true,
        addClass: _this.activeList
      });

      _this.setAriaDes(_this.root, selectedOption); // scrollIntoView when press up/down arrows


      _this.follow(target, _this.resultList);
    });

    _defineProperty(this, "follow", function (element, container) {
      if (element.offsetTop < container.scrollTop) {
        container.scrollTop = element.offsetTop;
      } else {
        var offsetBottom = element.offsetTop + element.offsetHeight;
        var scrollBottom = container.scrollTop + container.offsetHeight;

        if (offsetBottom > scrollBottom) {
          container.scrollTop = offsetBottom - container.offsetHeight;
        }
      }
    });

    _defineProperty(this, "remAria", function (element) {
      if (!element) {
        return;
      }

      _this.setAttr(element, {
        id: '',
        removeClass: _this.activeList,
        'aria-selected': false
      });
    });

    _defineProperty(this, "setAriaDes", function (element, type) {
      element.setAttribute('aria-activedescendant', type || '');
    });

    _defineProperty(this, "clearButton", function () {
      _this.setAttr(_this.clearBtn, {
        id: "auto-clear-".concat(_this.search),
        class: 'auto-clear hidden',
        type: 'button',
        'aria-label': 'claar text from input'
      });

      _this.root.insertAdjacentElement('afterend', _this.clearBtn);
    });

    _defineProperty(this, "handleClearButton", function (_ref5) {
      var target = _ref5.target;
      // hides clear button
      target.classList.add('hidden'); // clear value searchId

      _this.root.value = ''; // set focus

      _this.root.focus(); // remove li from ul


      _this.resultList.textContent = ''; // set default aria

      _this.reset(); // remove error if exist


      _this.error();

      _this.onReset(_this.root);
    });

    this.search = _element;
    this.root = document.getElementById(this.search);
    this.onSearch = isPromise(onSearch) ? onSearch : function (_ref6) {
      var a = _ref6.currentValue,
          b = _ref6.element;
      return Promise.resolve(onSearch({
        currentValue: a,
        element: b
      }));
    };
    this.onResults = onResults;
    this.onSubmit = onSubmit;
    this.onSelectedItem = onSelectedItem;
    this.onOpened = onOpened;
    this.onReset = onReset;
    this.noResults = noResults;
    this.delay = delay || 500;
    this.characters = howManyCharacters || 1;
    this.clearBtn = clearButton || false;
    this.selectFirst = selectFirst || false;
    this.toInput = insertToInput || false;
    this.classGroup = classGroup;
    this.disableCloseOnSelect = disableCloseOnSelect || false; // default config

    this.outputUl = "".concat(this.search, "-list");
    this.isLoading = 'auto-is-loading';
    this.isActive = 'auto-is-active';
    this.activeList = 'auto-selected';
    this.selectedOption = 'selectedOption';
    this.err = 'auto-error';
    this.regex = /[|\\{}()[\]^$+*?.]/g;
    this.timeout = null;
    this.resultList = document.createElement('ul');
    this.clearBtn = document.createElement('button');
    this.keyCodes = {
      ESC: 27,
      ENTER: 13,
      UP: 38,
      DOWN: 40,
      TAB: 9
    };
    this.init();
  };

  return Autocomplete;

}());
//# sourceMappingURL=autocomplete.min.js.map
